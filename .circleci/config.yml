version: 2
jobs:
  test010:
    working_directory: /home/circleci/go/src/github.com/segmentio/topicctl
    docker:
      - image: cimg/go:1.19
        environment:
          GO111MODULE: "on"
          ECR_ENABLED: True
          KAFKA_TOPICS_TEST_ZK_ADDR: zookeeper:2181
          KAFKA_TOPICS_TEST_KAFKA_ADDR: kafka1:9092

      - image: wurstmeister/zookeeper
        name: zookeeper
        ports:
          - "2181:2181"

      - image: wurstmeister/kafka:2.11-0.10.2.2
        name: kafka1
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_BROKER_RACK: zone1
          KAFKA_ADVERTISED_HOST_NAME: kafka1
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.11-0.10.2.2
        name: kafka2
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 2
          KAFKA_BROKER_RACK: zone1
          KAFKA_ADVERTISED_HOST_NAME: kafka2
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.11-0.10.2.2
        name: kafka3
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 3
          KAFKA_BROKER_RACK: zone2
          KAFKA_ADVERTISED_HOST_NAME: kafka3
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.11-0.10.2.2
        name: kafka4
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 4
          KAFKA_BROKER_RACK: zone2
          KAFKA_ADVERTISED_HOST_NAME: kafka4
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.11-0.10.2.2
        name: kafka5
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 5
          KAFKA_BROKER_RACK: zone3
          KAFKA_ADVERTISED_HOST_NAME: kafka5
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.11-0.10.2.2
        name: kafka6
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 6
          KAFKA_BROKER_RACK: zone3
          KAFKA_ADVERTISED_HOST_NAME: kafka6
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
          docker_layer_caching: true
      - restore_cache:
          keys:
            - go-modules-{{ checksum "go.sum" }}
      - run:
          name: Run tests
          command: make test
      - run:
          name: Run Snyk
          environment:
            SNYK_LEVEL: 'FLHI'
          command: curl -sL https://raw.githubusercontent.com/segmentio/snyk_helpers/master/initialization/snyk.sh | sh
      - save_cache:
          key: go-modules-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"

  test241:
    working_directory: /home/circleci/go/src/github.com/segmentio/topicctl
    docker:
      - image: cimg/go:1.19
        environment:
          GO111MODULE: "on"
          ECR_ENABLED: True
          KAFKA_TOPICS_TEST_ZK_ADDR: zookeeper:2181
          KAFKA_TOPICS_TEST_KAFKA_ADDR: kafka1:9092

      - image: wurstmeister/zookeeper
        name: zookeeper
        ports:
          - "2181:2181"

      - image: wurstmeister/kafka:2.12-2.4.1
        name: kafka1
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_BROKER_RACK: zone1
          KAFKA_ADVERTISED_HOST_NAME: kafka1
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.12-2.4.1
        name: kafka2
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 2
          KAFKA_BROKER_RACK: zone1
          KAFKA_ADVERTISED_HOST_NAME: kafka2
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.12-2.4.1
        name: kafka3
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 3
          KAFKA_BROKER_RACK: zone2
          KAFKA_ADVERTISED_HOST_NAME: kafka3
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.12-2.4.1
        name: kafka4
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 4
          KAFKA_BROKER_RACK: zone2
          KAFKA_ADVERTISED_HOST_NAME: kafka4
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.12-2.4.1
        name: kafka5
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 5
          KAFKA_BROKER_RACK: zone3
          KAFKA_ADVERTISED_HOST_NAME: kafka5
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      - image: wurstmeister/kafka:2.12-2.4.1
        name: kafka6
        ports:
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 6
          KAFKA_BROKER_RACK: zone3
          KAFKA_ADVERTISED_HOST_NAME: kafka6
          KAFKA_ADVERTISED_PORT: 9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
          docker_layer_caching: true
      - restore_cache:
          keys:
            - go-modules-{{ checksum "go.sum" }}
      - run:
          name: Run tests
          command: make test-v2
      - run:
          name: Run Snyk
          environment:
            SNYK_LEVEL: 'FLHI'
          command: curl -sL https://raw.githubusercontent.com/segmentio/snyk_helpers/master/initialization/snyk.sh | sh
      - save_cache:
          key: go-modules-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"

  publish-ecr:
    working_directory: /home/circleci/go/src/github.com/segmentio/topicctl
    docker:
      - image: cimg/go:1.19

    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
          docker_layer_caching: true
      - run:
          name: ECR Login
          command: |
            sudo apt-get update && sudo apt-get install --yes python3 python3-pip
            pip3 install awscli
            $(aws ecr get-login --no-include-email --region ${AWS_REGION} --registry-ids ${AWS_ACCOUNT_ID})
      - run:
          name: Build and push image
          command: |
            export SHORT_GIT_SHA=$(echo ${CIRCLE_SHA1} | cut -c -7)
            docker build \
              -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/topicctl:${SHORT_GIT_SHA} \
              --build-arg VERSION=${SHORT_GIT_SHA} \
              .
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/topicctl:${SHORT_GIT_SHA}

  publish-dockerhub:
    working_directory: /home/circleci/go/src/github.com/segmentio/topicctl
    docker:
      - image: cimg/go:1.19

    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
          docker_layer_caching: true
      - run:
          name: Build and push image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS

            docker context create buildx-build
            docker buildx create --use buildx-build
            docker buildx build \
              --platform=linux/amd64,linux/arm64 \
              -t segment/topicctl:${CIRCLE_TAG} \
              -t segment/topicctl:latest \
              --build-arg VERSION=${CIRCLE_TAG} \
              --push \
              .

workflows:
  version: 2
  run:
    jobs:
      - test010:
          context: snyk
          filters:
            tags:
              only: /.*/
      - test241:
          context: snyk
          filters:
            tags:
              only: /.*/
      - publish-ecr:
          context: segmentio-org-global
          requires:
            - test241
          filters:
            branches:
              only:
                - master
                - v0
      - publish-dockerhub:
          context: docker-publish
          requires:
            - test241
          filters:
            # Never publish from a branch event
            branches:
              ignore: /.*/
            # Release only on tag push events like vX[.Y.Z...][-whatever]
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-[a-zA-Z0-9-]+)?/

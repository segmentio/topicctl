name: ci

on: [push, pull_request]


jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch-name-step.outputs.branch-name }}
      tag-name: ${{ steps.tag-name-step.outputs.tag-name }}
      release-tag: ${{ steps.release-tag-step.outputs.release-tag }}
    steps:
    - uses: actions-ecosystem/action-regex-match@v2
      id: regex-match
      with:
        text: ${{ steps.tag-name-step.outputs.tag-name }}
        regex: '/v[0-9]+(\.[0-9]+)*(-[a-zA-Z0-9-]+)?/'
    - id: branch-name-step
      run: echo "branch-name=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
    - id: tag-name-step
      run: echo "tag-name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
    - id: release-tag-step
      run: echo "release-tag=${{ steps.regex-match.outputs.match }}" >> "$GITHUB_OUTPUT"
    - name: Print branch/tag
      run: |
        echo github.ref${{ github.ref }}
        echo github.ref_name=${{ github.ref_name }}
        echo github.ref_type=${{ github.ref_type }}
        echo branch-name=${{ steps.branch-name-step.outputs.branch-name }}
        echo tag-name=${{ steps.tag-name-step.outputs.tag-name }}
        echo release-tag=${{ steps.release-tag-step.outputs.release-tag }}

  # test010:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out repository code 
  #     uses: actions/checkout@v3
  #   - name: Run tests
  #     run: echo "TESTS PASSED"


  # test241:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out repository code 
  #     uses: actions/checkout@v3
  #   - name: Run tests
  #     run: echo "TESTS PASSED"
  
  
  # snyk:
  #   runs-on: ubuntu-latest
  #   needs: [test010, test241]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/golang@master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --severity-threshold=high --fail-on=upgradable
  
  
  # publish-ghcr:
  #   needs: [setup, snyk]
  #   runs-on: ubuntu-latest
  #   if: ${{ ( needs.setup.outputs.branch-name == 'master' ) ||  ( needs.setup.outputs.branch-name == 'v0' ) || ( needs.setup.outputs.branch-name == 'DP-556-migrate-topicctl-to-github-actions' ) }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: setup env variables
  #     id: vars
  #     run: |
  #       echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
  #   - name: Log in to the Container registry
  #     uses: docker/login-action@v2
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #       logout: true
  #   - run: echo "GHCR LOGIN SUCCESSFUL"

  # publish-dockerhub:
  #   needs: [setup, snyk]
  #   environment: CICD
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: setup env variables
  #     id: vars
  #     run: |
  #       echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
  #   - name: Print Release Tag
  #     run: echo $RELEASE_TAG
  #   - name: Dockerhub login
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ vars.DOCKERHUB_USER }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
  #       logout: true
  #   - name: Build and push image
  #     run:  |
  #           docker context create buildx-build
  #           docker buildx create --use buildx-build
  #           docker buildx build \
  #             --platform=linux/amd64,linux/arm64 \
  #             -t segment/topicctl:${RELEASE_TAG} \
  #             -t segment/topicctl:latest \
  #             --build-arg VERSION=${RELEASE_TAG} \
  #             --push \
  #             .
  #   - name: Dockerhub login succeeded
  #     run: echo "DOCKER HUB LOGIN SUCEEDED"
